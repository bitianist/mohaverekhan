# Generated by Django 2.1.7 on 2019-03-25 16:46

import colorfield.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import mohaverekhan.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Normalizer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(default='unknown-normalizer', unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('owner', models.CharField(default='undefined', max_length=100)),
                ('model_type', models.CharField(choices=[('manual', 'manual'), ('rule-based', 'rule-based'), ('stochastic', 'stochastic')], default='manual', max_length=15)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('model_details', mohaverekhan.models.UTF8JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Normalizer',
                'verbose_name_plural': 'Normalizers',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='RefinementPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('pattern', models.CharField(max_length=200, unique=True)),
                ('replacement', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(default=9999, unique=True)),
                ('owner', models.CharField(max_length=75)),
                ('is_valid', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Refinement Pattern',
                'verbose_name_plural': 'Refinement Patterns',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Sentence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(blank=True, default=0)),
            ],
            options={
                'verbose_name': 'Sentence',
                'verbose_name_plural': 'Sentences',
                'ordering': ('order', '-created'),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(default='unk', max_length=15)),
                ('persian', models.CharField(default='نامشخص', max_length=30)),
                ('color', colorfield.fields.ColorField(default='#FF0000', max_length=18)),
                ('examples', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), blank=True, default=list, size=None)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='TaggedSentence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('tokens', mohaverekhan.models.UTF8JSONField(default=list)),
                ('is_valid', models.BooleanField(blank=True, default=False)),
                ('sentence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_sentences', related_query_name='tagged_sentence', to='mohaverekhan.Sentence')),
            ],
            options={
                'verbose_name': 'Tagged Sentence',
                'verbose_name_plural': 'Tagged Sentences',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Tagger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(default='unknown-tagger', unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('owner', models.CharField(default='undefined', max_length=100)),
                ('model_type', models.CharField(choices=[('manual', 'manual'), ('rule-based', 'rule-based'), ('stochastic', 'stochastic')], default='manual', max_length=15)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('model_details', mohaverekhan.models.UTF8JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Tagger',
                'verbose_name_plural': 'Taggers',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='TagSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.SlugField(default='unknown-tag-set', unique=True)),
                ('unknown_tag', mohaverekhan.models.UTF8JSONField(blank=True, default=mohaverekhan.models.get_unknown_tag)),
            ],
            options={
                'verbose_name': 'Tag Set',
                'verbose_name_plural': 'Tag Sets',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField()),
                ('is_normal_text', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'verbose_name': 'Text',
                'verbose_name_plural': 'Texts',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='TranslationCharacter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(max_length=2, unique=True)),
                ('destination', models.CharField(max_length=2)),
                ('description', models.TextField(blank=True)),
                ('owner', models.CharField(max_length=75)),
                ('is_valid', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Translation Character',
                'verbose_name_plural': 'Translation Characters',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='NormalText',
            fields=[
                ('text_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mohaverekhan.Text')),
                ('is_valid', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'verbose_name': 'Normal Text',
                'verbose_name_plural': 'Normal Texts',
                'ordering': ('-created',),
            },
            bases=('mohaverekhan.text',),
        ),
        migrations.AddField(
            model_name='tagger',
            name='tag_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='taggers', related_query_name='tagger', to='mohaverekhan.TagSet'),
        ),
        migrations.AddField(
            model_name='taggedsentence',
            name='tagger',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_sentences', related_query_name='tagged_sentence', to='mohaverekhan.Tagger'),
        ),
        migrations.AddField(
            model_name='tag',
            name='tag_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='tags', related_query_name='tag', to='mohaverekhan.TagSet'),
        ),
        migrations.AddField(
            model_name='sentence',
            name='taggers',
            field=models.ManyToManyField(blank=True, related_name='sentences', related_query_name='sentence', through='mohaverekhan.TaggedSentence', to='mohaverekhan.Tagger'),
        ),
        migrations.AddField(
            model_name='sentence',
            name='text',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentences', related_query_name='sentence', to='mohaverekhan.Text'),
        ),
        migrations.CreateModel(
            name='RefinementNormalizer',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('mohaverekhan.normalizer',),
        ),
        migrations.AddField(
            model_name='text',
            name='normalizers',
            field=models.ManyToManyField(blank=True, related_name='texts', related_query_name='text', through='mohaverekhan.NormalText', to='mohaverekhan.Normalizer'),
        ),
        migrations.AlterUniqueTogether(
            name='tag',
            unique_together={('name', 'persian'), ('name', 'color'), ('name', 'tag_set')},
        ),
        migrations.AddField(
            model_name='normaltext',
            name='normalizer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='normal_texts', related_query_name='normal_text', to='mohaverekhan.Normalizer'),
        ),
        migrations.AddField(
            model_name='normaltext',
            name='text',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='normal_texts', related_query_name='normal_text', to='mohaverekhan.Text'),
        ),
    ]
