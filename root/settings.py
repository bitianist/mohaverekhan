"""
Django settings for mohaverekhan project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'zy(a6up*a=)^wh8ewtiu5y-595ws87qhb-rc@*htu4zd%*-w02'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']
# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'mohaverekhan.apps.MohaverekhanConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'colorfield',
    'admin_reorder',
    # 'request',
]

MIDDLEWARE = [
    # 'request_logging.middleware.LoggingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'request.middleware.RequestMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
]

ROOT_URLCONF = 'root.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mohaverekhan_db',
        'USER': 'bitianist',
        'PASSWORD': '123654789',
        'HOST': '127.0.0.1',
        'PORT': '5432',
        'DEBUG': True,
        'DEBUG_PROPAGATE_EXCEPTIONS': True,
        # 'CONN_MAX_AGE': 600,

    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)
}

# MOHAVEREKHAN = 'mohaverekhan'
# AUTH = 'auth'
# ADMIN_REORDER = (
#     (MOHAVEREKHAN, (
#                         f'{MOHAVEREKHAN}word', f'{MOHAVEREKHAN}wordnormal', 
#                         f'{MOHAVEREKHAN}text', f'{MOHAVEREKHAN}textnormal', f'{MOHAVEREKHAN}texttag'
#                         f'{MOHAVEREKHAN}tagset', f'{MOHAVEREKHAN}tag', 
#                         f'{MOHAVEREKHAN}normalizer', f'{MOHAVEREKHAN}tokenizer', 
#                         f'{MOHAVEREKHAN}tagger', f'{MOHAVEREKHAN}validator', 
#                     )
#     ),
#     (AUTH, (f'{AUTH}group', f'{AUTH}user')),
# )

MOHAVEREKHAN = 'mohaverekhan'
AUTH = 'auth'
ADMIN_REORDER = (
    # # Keep original label and models
    # 'sites',
    # Reorder app models
    {
        'app': MOHAVEREKHAN, 
        'label': 'Word',
        'models': (
                f'{MOHAVEREKHAN}.Word', f'{MOHAVEREKHAN}.WordNormal',
            )
    },
    {
        'app': MOHAVEREKHAN, 
        'label': 'Text',
        'models': (
                f'{MOHAVEREKHAN}.Text', f'{MOHAVEREKHAN}.TextNormal', 
                f'{MOHAVEREKHAN}.TextTag',
            )
    },
    {
        'app': MOHAVEREKHAN, 
        'label': 'Tag',
        'models': (
                f'{MOHAVEREKHAN}.Tag', f'{MOHAVEREKHAN}.TagSet',
            )
    },
    {
        'app': MOHAVEREKHAN, 
        'label': 'Token',
        'models': (
                f'{MOHAVEREKHAN}.Token', f'{MOHAVEREKHAN}.TokenTag',
            )
    },
    {
        'app': MOHAVEREKHAN, 
        'label': 'Operator',
        'models': (
                f'{MOHAVEREKHAN}.Normalizer', f'{MOHAVEREKHAN}.Tokenizer', 
                f'{MOHAVEREKHAN}.Tagger', f'{MOHAVEREKHAN}.Validator', 
            )
    },
    # {
    #     'app': MOHAVEREKHAN, 
    #     'label': 'Text',
    #     'models': (f'{MOHAVEREKHAN}.Word', f'{MOHAVEREKHAN}.WordNormal', 
    #             f'{MOHAVEREKHAN}.Text', f'{MOHAVEREKHAN}.TextNormal', f'{MOHAVEREKHAN}.TextTag',
    #             f'{MOHAVEREKHAN}.Tag', f'{MOHAVEREKHAN}.TagSet', 
    #             f'{MOHAVEREKHAN}.Normalizer', f'{MOHAVEREKHAN}.Tokenizer', 
    #             f'{MOHAVEREKHAN}.Tagger', f'{MOHAVEREKHAN}.Validator', 
    #                 )
    # },

    {'app': AUTH, 'models': (f'{AUTH}.User', f'{AUTH}.Group')},

)

import datetime
import os

now = datetime.datetime.now()
PROJECT_PATH = os.path.abspath(os.path.dirname(__name__))
# BASE_LOG_PATH = os.path.join(PROJECT_PATH, 'logs', now.date().__str__())
BASE_LOG_PATH = os.path.join(r'/home/bitianist/bitianist', 'logs', now.date().__str__())
os.makedirs(BASE_LOG_PATH, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'main': {
            # exact format is not important, this is the minimum information
            'format': '[ %(levelname)s ][ %(asctime)s ][ %(process)d %(thread)d ][ %(module)s %(lineno)d ][ %(message)s ]',
        },
    },
    'handlers': {
        'root': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_LOG_PATH, 'root.log'),
            'formatter': 'main',
        },
        'mohaverekhan': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_LOG_PATH, 'mohaverekhan.log'),
            'formatter': 'main',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'main',
        },
    },
    'root': {
        'handlers': ['root'],
        'level': 'DEBUG',
        'propagate': True,
    },
    'loggers': {
        '': {
            'handlers': ['console', 'root'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'mohaverekhan': {
            'handlers': ['console', 'mohaverekhan'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}